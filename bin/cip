#!/bin/bash

set -ex

if [ "x$CIP_TAG" == "x" ]; then
  export CIP_TAG=default
fi

if test -t 1; then
  export CIP_USE_TTY=-it
else
  export CIP_USE_TTY=
fi

function usage {
  cat <<EOF
usage: $0 [subcommand]

subcommands:

  cip config
  cip config-alien
    - generate a .travis.yml and .github/workflow/linux.yml that uses cip

  cip login
  cip start
  cip before_install
  cip before-install
    - start background container

  cip diag
    - print perl diagnostics

  cip install
    - install necessary dzil and perl prereqs

  cip script
  cip test
    - test your dist

  cip sudo [command [ ... ] ]
    - exec command in container as root

  cip exec [command [ ... ] ]
    - exec command in container as user

  cip exec-background [command [ ... ] ]
    - exec command in the background

  cip bash [ ... ]
  cip tcsh [ ... ]
  cip perl [ ... ]
  cip nano [ ... ]
    - interactive session with bash, tcsh, perl or nano

  cip stop
    - stop the background container

  cip stop_all
  cip stop-all
    - stop all background cip containes and remove scn images

  cip clean
    - stop container, and remove dependency cache

  cip clean_all
  cip clean-all
    - stop all background cip containers and remove all dependency caches

  cip run [ CIP_TAG ]
    - run shell in a ciperl container with the given tag

  cip scn build
    - build scn images

  cip scn run [ test-name ]
    - run scn tests

  cip scn clean
    - remove all scn images

  cip pkg [ package ]
    - install package

  cip cache-key
    - print out a cache key for github actions

environment:

  CIP_TAG  the docker tag for plicease/ciperl defaults to 'default'
EOF
  exit 2
}

if [ "x$1" == "x" ]; then
  if [ "x$CIP_COMMAND" == "x" ]; then
    usage
  else
    command=$CIP_COMMAND
    export -n CIP_COMMAND
  fi
else
  command=$1
  shift
fi

export CIP_COMP=$(basename $(pwd))
export CIP_CONT=cip-$CIP_COMP-$CIP_TAG

function cip_local_lib {
  container_path=$(docker exec $CIP_CONT printenv PATH)
  # PERL_MB_OPT "--install_base /home/cip/perl5"
  export CIP_LOCAL_LIB="-e PATH=/home/cip/perl5/bin:$container_path -e PERL5LIB=/home/cip/perl5/lib/perl5 -e PERL_MM_OPT=INSTALL_BASE=/home/cip/perl5"
}

function env2docker {
  export CIP_ENV_DOCKER=$(perl -e 'use strict; print join " ", map { my($n,$v) = split /=/, $_, 2; "-e $n=$v" } @ARGV' $CIP_ENV)
}

function dist_dir_name {
  if [ -z "$CIP_DIST_VER" ]; then
    export CIP_DIST_DIR=$(grep ^name dist.ini | head -1 | cut -d= -f2 | sed 's/^[ ]*//' | sed 's/[ ]*$//')-$(grep ^version dist.ini | head -1 | cut -d= -f2 | sed 's/^[ ]*//' | sed 's/[ ]*$//')
  else
    export CIP_DIST_DIR=$(grep ^name dist.ini | head -1 | cut -d= -f2 | sed 's/^[ ]*//' | sed 's/[ ]*$//')-$CIP_DIST_VER
  fi
}

case "$command" in

  cache-key)
    ;;

  *)
    if [ "x$GITHUB_ACTIONS" == "xtrue" ]; then
      sudo mkdir -p ~/.cip/install-cache/$CIP_TAG ~/.cip/dzil-cache/$CIP_TAG
    else
      mkdir -p ~/.cip/install-cache/$CIP_TAG ~/.cip/dzil-cache/$CIP_TAG
    fi
    if [ "x$TRAVIS" == "xtrue" ] || [ "x$GITHUB_ACTIONS" == "xtrue" ]; then
      if ! [ -e /tmp/cip-chmod-fixup ]; then
        find ~/.cip/dzil-cache    -print0 | xargs -0 -L 300 sudo chown -R 1000:1000
        find ~/.cip/install-cache -print0 | xargs -0 -L 300 sudo chown -R 1000:1000
        touch /tmp/cip-chmod-fixup
      fi
    fi
    ;;

esac

case "$command" in

  config)
    CONFIG=$(realpath $(dirname $0)/../config)
    mkdir -p .github/workflows
    cp $CONFIG/github.yml .github/workflows/linux.yml
    ;;

  config-alien)
    CONFIG=$(realpath $(dirname $0)/../config)
    mkdir -p .github/workflows
    cp $CONFIG/github-alien.yml .github/workflows/linux.yml
    ;;

  run)
    if [ "$1" != "" ]; then
      export CIP_TAG="$1"
    fi
    docker run \
      -v `pwd`:/work \
      -v ~/.cip:/home/cip/.cip \
      -v ~/.cip/install-cache/"$CIP_TAG":/home/cip/perl5 \
      -v ~/.cip/dzil-cache/"$CIP_TAG":/home/cip/dzil \
      --rm \
      --tmpfs /tmp \
      $CIP_USE_TTY \
      plicease/ciperl:$CIP_TAG
  ;;

  check)
    export CIP_TAG=static
    if [ -f dist.ini ]; then
      docker run \
        -v `pwd`:/work \
        -v ~/.cip:/home/cip/.cip \
        -v ~/.cip/install-cache/"$CIP_TAG":/home/cip/perl5 \
        -v ~/.cip/dzil-cache/"$CIP_TAG":/home/cip/dzil \
        --tmpfs /tmp \
        --rm \
        $CIP_USE_TTY \
        plicease/ciperl:$CIP_TAG \
        dzil run --no-build prove -lr xt
    else
      docker run \
        -v `pwd`:/work \
        -v ~/.cip:/home/cip/.cip \
        -v ~/.cip/install-cache/"$CIP_TAG":/home/cip/perl5 \
        -v ~/.cip/dzil-cache/"$CIP_TAG":/home/cip/dzil \
        --tmpfs /tmp \
        --rm \
        $CIP_USE_TTY \
        plicease/ciperl:$CIP_TAG \
        prove -lr xt
    fi
  ;;

  login)
    if [ ! -z "${DOCKERHUB_PULL_USERNAME:-}" ]; then
      echo "${DOCKERHUB_PULL_PASSWORD}" | docker login --username "${DOCKERHUB_PULL_USERNAME}" --password-stdin
    else
      echo "warning: no credentials"
      exit;
    fi
  ;;

  start)
    if [ "$CIP_TAG" == "static" ]; then
      echo no start for static
      exit
    fi
    docker run \
      --name $CIP_CONT \
      -v `pwd`:/work \
      -v ~/.cip:/home/cip/.cip \
      -v ~/.cip/install-cache/"$CIP_TAG":/home/cip/perl5 \
      -v ~/.cip/dzil-cache/"$CIP_TAG":/home/cip/dzil \
      --tmpfs /tmp \
      -d \
      plicease/ciperl:$CIP_TAG \
      sleep 86400
    ;;

  before_install|before-install)
    if [ "x$TRAVIS" != "xtrue" ]; then
      echo "before-install is legacy command for travis-ci only"
      false
    fi
    if [ "$CIP_TAG" == "static" ]; then
      echo no before-install for static
      exit
    fi
    cip start
    case "$command" in
      before_install|before-install)
        echo "+docker version"
        docker version
        echo "+docker image ls"
        docker image ls
        echo "+docker ps"
        docker ps
      ;;
    esac
    # TODO: this works around the fact that the minor version (the y in 5.x.y)
    # may have changed and we may have a cached local::lib.  It's possible that
    # there may be a breaking change between minor versions in a dev release
    # so it would be better to detect that change and clear the cache.
    cip bash -c 'id'
    cip bash -c 'curl https://cpanmin.us | perl - -n --reinstall App::cpanminus'
    if [ -f maint/cip-before-install ]; then
      ./maint/cip-before-install
    fi
    ;;

  diag)
    if [ "$CIP_TAG" == "static" ]; then
      docker run --rm plicease/ciperl:$CIP_TAG perl -V
    else
      cip exec perl -V
    fi
    echo "CIP_USE_TTY=$CIP_USE_TTY"
    ;;

  install)
    if [ "$CIP_TAG" == "static" ]; then
      echo no install for static
      exit
    fi
    if [ "x$TRAVIS" != "xtrue" ]; then
      cip bash -c 'curl https://cpanmin.us | perl - -n --reinstall App::cpanminus'
      if [ -f maint/cip-before-install ]; then
        ./maint/cip-before-install
      fi
    fi
    cip_local_lib
    if [ -f maint/cip-install ]; then
      ./maint/cip-install
    elif [ -f dist.ini ]; then
      echo ":::: DZIL DEPS   ::::"
      if [ -f alienfile ]; then
        cip exec bash -c 'dzil-af missing -p configure | dzil-cpanm -n'
        cip exec bash -c 'dzil-af missing | dzil-cpanm -n'
      fi
      cip exec bash -c 'dzil-dzil authordeps --missing | dzil-cpanm -n'
      echo ":::: DZIL BUILD  ::::"
      cip exec dzil-dzil build
      echo ":::: MODULE DEPS ::::"
      dist_dir_name
      cip exec bash -c "cd $CIP_DIST_DIR; cpanm -n --installdeps ."
    elif [ -f Makefile.PL ] || [ -f Build.PL ] || [ -f cpanfile ]; then
      cip exec cpanm -n --installdeps .
    else
      echo "unknown installer"
      exit 2;
    fi
    if [ -f maint/cip-after-install ]; then
      ./maint/cip-after-install
    fi
    ;;

  scn)

    if [ "$CIP_TAG" == "static" ]; then
      echo no scn for static
      exit
    fi

    if [ -z "$1" ]; then
      scn_command="run"
    else
      scn_command=$1
      shift
    fi

    if [ -d t/cip ]; then

      case "$scn_command" in

        build)
          for dirname in t/cip/*; do
            test=$(basename $dirname)
            if [ -f "t/cip/$test/Dockerfile" ]; then
              echo +docker build -f t/cip/$test/Dockerfile . --build-arg cip_tag=$CIP_TAG -t scn-$test:$CIP_TAG
              docker build -f t/cip/$test/Dockerfile . --build-arg cip_tag=$CIP_TAG -t scn-$test:$CIP_TAG
            fi
          done
          ;;

        run)
          if [ -z "$1" ]; then
            for dirname in t/cip/*; do
              cip scn run-single $(basename $dirname)
            done
          else
            cip scn run-single $1
          fi
          ;;

        run-single)
          test=$1
          if [ -f "t/cip/$test/Dockerfile" ]; then
            echo +docker run -t --rm scn-$test:$CIP_TAG
            docker run --tmpfs /tmp -t --rm scn-$test:$CIP_TAG
          else
            echo "no test $test"
            exit 2
          fi
          ;;

        clean)
          docker images "scn-*" --format '{{json .}}' | while read -r line ; do
            id=$(echo $line | jq -r .ID )
            docker image rm $id
          done
          ;;

        *)
          echo "unknown scn subcommand: $scn_command"
          exit 2
          ;;

      esac

    else
      if [ -z "$CIP_QUIET" ]; then
        echo "no t/cip directory";
      fi
    fi
    ;;

  script|test)
    if [ "$CIP_TAG" == "static" ]; then
      echo "redirecting to cip check for static analysis"
      cip check
    else
      cip_local_lib
      if [ -f dist.ini ]; then
        dist_dir_name
        if [ -f "$CIP_DIST_DIR/maint/cip-test" ]; then
          cip bash -c "cd $CIP_DIST_DIR; env PERL_USE_UNSAFE_INC=0 $CIP_ENV ./maint/cip-test"
        elif [ -f "$CIP_DIST_DIR/Makefile.PL" ]; then
          cip exec env PERL_USE_UNSAFE_INC=0 $CIP_ENV bash -c "set -ex; cd $CIP_DIST_DIR; perl Makefile.PL; make; make test TEST_VERBOSE=1"
        elif [ -f "$CIP_DIST_DIR/Build.PL" ]; then
          cip exec env PERL_USE_UNSAFE_INC=0 $CIP_ENV bash -c "set -ex; cd $CIP_DIST_DIR; perl Build.PL; ./Build; ./Build test verbose=1"
        else
          echo "unknown installer (dzil)"
          exit 2;
        fi
      elif [ -f maint/cip-test ]; then
        cip bash -c 'env PERL_USE_UNSAFE_INC=0 ./maint/cip-test'
      elif [ -f Makefile.PL ]; then
        cip exec env PERL_USE_UNSAFE_INC=0 $CIP_ENV bash -c "set -ex; perl Makefile.PL; make; make test TEST_VERBOSE=1"
      elif [ -f Build.PL ]; then
        cip exec env PERL_USE_UNSAFE_INC=0 $CIP_ENV bash -c "set -ex; perl Build.PL; ./Build; ./Build test verbose=1"
      elif [ -d t ]; then
        cip exec env PERL_USE_UNSAFE_INC=0 $CIP_ENV bash -c "set -ex; prove -lvm"
      else
        echo "unknown instaler"
        exit 2;
      fi
    fi
    ;;

  sudo)
    env2docker
    docker exec $CIP_ENV_DOCKER $CIP_CONT "$@"
    ;;

  exec)
    cip_local_lib
    env2docker
    docker exec $CIP_LOCAL_LIB -e PERL_MB_OPT="--install_base /home/cip/perl5" $CIP_ENV_DOCKER -u 1000 $CIP_CONT "$@"
    ;;

  exec-background)
    cip_local_lib
    env2docker
    docker exec -d $CIP_LOCAL_LIB -e PERL_MB_OPT="--install_base /home/cip/perl5" $CIP_ENV_DOCKER -u 1000 $CIP_CONT "$@"
    ;;

  bash|tcsh|perl|nano)
    cip_local_lib
    env2docker
    docker exec $CIP_LOCAL_LIB -e PERL_MB_OPT="--install_base /home/cip/perl5" $CIP_USE_TTY $CIP_ENV_DOCKER -u 1000 $CIP_CONT $command "$@"
    ;;

  stop)
    docker stop /$CIP_CONT
    docker container rm /$CIP_CONT
    ;;

  clean)
    cip stop
    rm -rf ~/.cip/install-cache/$CIP_TAG ~/.cip/dzil-cache/$CIP_TAG
    ;;

  stop_all|stop-all)
    env CIP_QUIET=1 cip scn clean
    for name in $( docker ps --format '{{json .Names}}' ) ; do
      name=$( echo $name | jq -r . )
      if echo $name | grep -q ^cip- ; then
        docker stop /$name
        docker container rm /$name
      fi
    done
    ;;

  clean_all|clean-all)
    cip stop-all
    rm -rf ~/.cip
    ;;

  pkg)
    if [ "x$1" == "x" ]; then
      echo "usage: cip pkg [package-name]";
    else
      pkg=$1
      shift
      case "$pkg" in

        rust)
          cip bash -c '
            set -ex
            export TMPDIR=/home/cip/tmp
            mkdir -p $TMPDIR
            curl https://sh.rustup.rs -sSf > $TMPDIR/rustup-init.sh
            chmod +x $TMPDIR/rustup-init.sh
            $TMPDIR/rustup-init.sh --no-modify-path -y
            rm -f $TMPDIR/rustup-init.sh
          '
          ;;

        golang)
          cip sudo bash -c '
            set -ex
            if [ "x$2" == "x" ]; then
              golangver=1.19.2
            else
              golangver="$2"
            fi
            curl https://go.dev/dl/go$golangver.linux-amd64.tar.gz -LsSf | tar -C /usr/local -zxf -
            cd /usr/local/bin
            ln -s ../go/bin/* .
          '
          ;;

        *)
          cip sudo bash -c "
            set -ex
            cd /
            curl https://dist.wdlabs.com/$pkg.tar.gz -sSf | tar zxvf -
            chmod -R go+r+X /usr/local
            ldconfig
          "
          ;;

      esac
    fi
    ;;

  cache-key)
    # The Perl CIP_TAG for this container
    echo -n perl-$CIP_TAG
    # We also want the full Perl version, because bumping dev version will be incompatible
    # with the old version
    echo -n -$( docker run --rm $CIP_USE_TTY plicease/ciperl:$CIP_TAG perl -e 'print $]' )
    # We also want the full version of the dzil Perl, since that could change too
    echo -n -dzil-$( docker run --rm $CIP_USE_TTY plicease/ciperl:$CIP_TAG bash -c '$(head -1 $(dzil-wrapper which dzil)|cut -d! -f2) -e "print $]"' )
    # Finally we have a counter that we can bump at the end.  Sometimes we make cache mistakes
    # and we need to clear the cache.  GitHub Actions is kinda dumb in that there is no way
    # to clear the cache for just one matrix entry or repository, so unfortunately we have
    # to make a global bump when things go wrong
    echo -0
    ;;

  *)
    echo unknown command: $command
    exit 2
    ;;

esac

